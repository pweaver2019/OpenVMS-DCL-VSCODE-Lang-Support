<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>com</string>
	</array>
	<key>name</key>
	<string>DIGITAL Command Language (DCL)</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>comment</key>
			<string>Lines without a '$' - These are illegal, and should be displayed as errors</string>
			<key>match</key>
			<string>^(?!\$)(.*)$</string>
			<key>name</key>
			<string>invalid.illegal.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>This rule denotes the various output streams of dcl</string>
			<key>match</key>
			<string>(?i)(sys\$output|sys\$error|sys\$input|sys\$command|nl:)</string>
			<key>name</key>
			<string>constant.language.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>This rule denotes function returnrvalues of dcl</string>
			<key>match</key>
			<string>(?i)(\$severity|\$status)</string>
			<key>name</key>
			<string>constant.language.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>This rule denotes the various signal handlers of dcl</string>
			<key>match</key>
			<string>(?i)(control_y|control_c|sigabrt|sigalrm|sigbus|sigchild|sigemt|sigfpe|sighup|sigill|sigint|sigiot|sigkill|sigquit|sigpipe|sigsegv|sigsys|sigterm|sigtrap|sigusr1|sigusr2|sigwinch)</string>
			<key>name</key>
			<string>constant.language.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>A rule for boolean true and false in dcl</string>
			<key>match</key>
			<string>(?i)(true|false)</string>
			<key>name</key>
			<string>constant.language.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>Line comments in DCL - These start with $! and go up to a newline</string>
			<key>match</key>
			<string>^\$([ \t]*)\!(.*)</string>
			<key>name</key>
			<string>comment.line.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>This is the marker that starts all DCL lines</string>
			<key>match</key>
			<string>^\$</string>
			<key>name</key>
			<string>constant.language.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>This is the grammar for simple double quoted strings ( for text )</string>
			<key>match</key>
			<string>\"([^\"]*)\"</string>
			<key>name</key>
			<string>string.quoted.double</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>These are the various octal numbers DCL recognizes</string>
			<key>match</key>
			<string>([-])?(%0[0-9]+)</string>
			<key>name</key>
			<string>constant.language.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>These are the various hexadecimal numbers DCL recognizes</string>
			<key>match</key>
			<string>([-])?(%((?i)X)[0-9]+)</string>
			<key>name</key>
			<string>constant.language.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>These are the various integer numbers DCL recognizes</string>
			<key>match</key>
			<string>([-])?([0-9]+)</string>
			<key>name</key>
			<string>constant.language.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>These are the substring replacement operators</string>
			<key>match</key>
			<string>(:==|:=)</string>
			<key>name</key>
			<string>keyword.operator.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>These are the string comparison operators recognized by DCL</string>
			<key>match</key>
			<string>\b(?i)(eqs|ges|gts|les|lts|nes|=)\b</string>
			<key>name</key>
			<string>keyword.operator.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>These are the number comparison operators recognized by DCL</string>
			<key>match</key>
			<string>\b(?i)(eq|ge|gt|le|lt|ne)\b</string>
			<key>name</key>
			<string>keyword.operator.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>These are seperators used by VMS's 'PIPE' command.</string>
			<key>match</key>
			<string>(?i)(\|\||\||;|&amp;&amp;|&amp;|@TEE)</string>
			<key>name</key>
			<string>keyword.operator.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>These are the control flow mechanisms recognized by DCL</string>
			<key>match</key>
			<string>\b(?i)(if|else|then|endif|exit)\b</string>
			<key>name</key>
			<string>keyword.control.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>This is the execute procedure grammar. (@function | @DEVICE)</string>
			<key>match</key>
			<string>(?i)(@[^\s]*)</string>
			<key>name</key>
			<string>entity.name.function.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>These are DCL lexical functions that return infomration about character strings and attributes of current processes - If they are preceeded with a '/' then they are quantifiers</string>
			<key>match</key>
			<string>\b(?i)(?&lt;!\/)(f\$context|f\$csid|f\$cunits|f\$cvsi|f\$cvtime|f\$cvui|f\$delta_time|f\$device|f\$directory|f\$edit|f\$element|f\$environment|f\$extract|f\$fao|f\$fid_to_name|f\$file_attributes|f\$getdvi|f\$getenv|f\$getjpi|f\$getqui|f\$getsyi|f\$identifier|f\$integer|f\$length|f\$license|f\$locate|f\$match_wild|f\$message|f\$mode|f\$multipath|f\$parse|f\$pid|f\$privilege|f\$process|f\$search|f\$setprv|f\$string|f\$time|f\$trnlnm|f\$type|f\$unique|f\$user|f\$verify)\b</string>
			<key>name</key>
			<string>entity.name.function.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>These are built in recognized dcl functions - If they are preceeded with a '/' then they are quantifiers</string>
			<key>match</key>
			<string>\b(?i)(?&lt;!\/)(accounting|allocate|analyze/(audit|crash_dump|disk_structure|error_log/elv|error_log|image|media|object|process_dump|rms_file|system)|append|assign/(merge|queue)|assign|attach|backup|call|cancel|close|connect|continue|convert/(document|reclaim)|convert|copy/(ftp|rcp)|copy|create/(directory|fdl|name_table|terminal)|create|deallocate|deassign/queue|deassign|debug|deck|define/(characteristic|form|key)|define|deposit|diagnose|differences|directory|disable autostart|disconnect|dismount|dump|edit/(acl|edt|fdl|sum|teco|tpu)|enable autostart|endsubroutine|eod|eoj|examine|exchange/network|exchange|font|gosub|goto|help/message|help|initialize/queue|initialize|inquire|install|java|job|library|license|link|login|logout|macro|mail|merge|message|monitor|mount|ncs|on|open|password|patch|phone|pipe|pppd|print|product|purge|read|recall|rename|reply|request|return|run TODO|runoff|search|sort|spawn|submit|subroutine|synchronize|type|view|wait|write|xauth)\b</string>
			<key>name</key>
			<string>entity.name.function.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>These are built in recognized dcl DELETE functions</string>
			<key>match</key>
			<string>\b(?i)(delete/(characteristic|entry|form|intrusion_record|key|queue/manager|queue|symbol)|delete)\b</string>
			<key>name</key>
			<string>entity.name.function.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>These are built ins recognized dcl SET functions</string>
			<key>match</key>
			<string>\b(?i)(set (accounting|audit|broadcast|cache/reset|card_reader|cluster/expected_votes|command|control|cpu|day|default|device/served|device|directory|display|entry|file|host/(dte|dup|hsc|lat|rlogin|telnet|tn3270)|host|key|logins|magtape|message|network|on|output_rate|password|preferred_path|prefix|printer|process|prompt|protection/default|queue|restart_value|rights_list|rms_default|security|server|shadow|symbol|terminal|time|verify|volume|working_set)|set)\b</string>
			<key>name</key>
			<string>entity.name.function.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>These are build in recnized START functions</string>
			<key>match</key>
			<string>\b(?i)(start/(cpu|network|queue/manager|queue|zone))\b</string>
			<key>name</key>
			<string>entity.name.function.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>These are built in recognized dcl STOP functions</string>
			<key>match</key>
			<string>\b(?i)(stop/(cpu|network|queue/(abort|entry|manager/cluster|next|requeue|reset)|queue|queues/on_node|zone)|stop)\b</string>
			<key>name</key>
			<string>entity.name.function.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>These are built in recognized dcl SHOW functions</string>
			<key>match</key>
			<string>\b(?i)(show (accounting|audit|broadcast|cluster|cpu|default|devices/served|devices|display|entry|error|intrusion|key|license|logical|memory|network|printer|process|protection|queue/(characteristics|form|managers)|queue|quota|rms_default|security|server|shadow|status|symbol|system|terminal|time|translation|users|working_set|zone)|show)\b</string>
			<key>name</key>
			<string>entity.name.function.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>These are user defined functions invoked from the goto statement</string>
			<key>match</key>
			<string>\b(?i)(?&lt;=goto[ ])([a-zA-Z0-9-_])+\b</string>
			<key>name</key>
			<string>support.function.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>These are user defined functions invoked from the error quantifier</string>
			<key>match</key>
			<string>\b(?i)(?&lt;=\/error=)([a-zA-Z0-9-_])+\b</string>
			<key>name</key>
			<string>support.function.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>These are user defined functions invoked from the end_of_file quantifier</string>
			<key>match</key>
			<string>\b(?i)(?&lt;=\/end_of_file=)([a-zA-Z0-9-_])+\b</string>
			<key>name</key>
			<string>support.function.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>These are the decleration of user defined function blocks. They appear on their own ine and end with a ':' and can not contain spaces</string>
			<key>match</key>
			<string>([a-zA-Z0-9-_]+)([^\s]*):$</string>
			<key>name</key>
			<string>entity.name.function.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>This denotes a variable invokation.</string>
			<key>match</key>
			<string>(?i)('([a-zA-Z0-9-_])+')</string>
			<key>name</key>
			<string>variable.other.com</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>This denotes a variable decleration. Note that symbol decleration is NOT considered a variable in DCL</string>
			<key>match</key>
			<string>\b(?i)(?&lt;!\/)(?&lt;!goto[ ])([a-zA-Z0-9-_]+)\b</string>
			<key>name</key>
			<string>variable.other.com</string>
		</dict>
	</array>
	<key>scopeName</key>
	<string>source.dcl</string>
	<key>uuid</key>
	<string>4981af1b-4082-48bb-ba55-412cff51de31</string>
</dict>
</plist>
